[{"D:\\jobStuff\\hoichistakes\\src\\index.js":"1","D:\\jobStuff\\hoichistakes\\src\\App.js":"2","D:\\jobStuff\\hoichistakes\\src\\reportWebVitals.js":"3","D:\\jobStuff\\hoichistakes\\src\\redux\\store.js":"4","D:\\jobStuff\\hoichistakes\\src\\components\\BackgroundImage.js":"5","D:\\jobStuff\\hoichistakes\\src\\components\\Header.js":"6","D:\\jobStuff\\hoichistakes\\src\\Pages\\stakingPage.js":"7","D:\\jobStuff\\hoichistakes\\src\\redux\\reducers.js":"8","D:\\jobStuff\\hoichistakes\\src\\components\\Molecules\\DrawerContent.js":"9","D:\\jobStuff\\hoichistakes\\src\\components\\Atoms\\BurguerIcon.js":"10","D:\\jobStuff\\hoichistakes\\src\\Utils\\walletInteract.js":"11","D:\\jobStuff\\hoichistakes\\src\\components\\Molecules\\staking\\MonkSection.js":"12","D:\\jobStuff\\hoichistakes\\src\\components\\Molecules\\staking\\StakingSection\\StakingSection.js":"13","D:\\jobStuff\\hoichistakes\\src\\redux\\actions.js":"14","D:\\jobStuff\\hoichistakes\\src\\components\\Atoms\\Button.js":"15","D:\\jobStuff\\hoichistakes\\src\\theme\\theme.js":"16","D:\\jobStuff\\hoichistakes\\src\\constants\\routes.js":"17","D:\\jobStuff\\hoichistakes\\src\\components\\Molecules\\staking\\GeneralDepositInfo.js":"18","D:\\jobStuff\\hoichistakes\\src\\components\\Molecules\\staking\\GeneralInfo.js":"19","D:\\jobStuff\\hoichistakes\\src\\components\\Molecules\\staking\\TotalLockedSection.js":"20","D:\\jobStuff\\hoichistakes\\src\\components\\BackgroundButton\\BackgroundButton.js":"21","D:\\jobStuff\\hoichistakes\\src\\components\\Molecules\\staking\\RecentActions.js":"22","D:\\jobStuff\\hoichistakes\\src\\components\\Molecules\\staking\\DepositWithdrawSection.js":"23","D:\\jobStuff\\hoichistakes\\src\\containers\\BackgroundOpacity.js":"24","D:\\jobStuff\\hoichistakes\\src\\components\\Molecules\\staking\\RecentActionRow.js":"25","D:\\jobStuff\\hoichistakes\\src\\components\\Atoms\\Input.js":"26","D:\\jobStuff\\hoichistakes\\src\\containers\\AppRouter.js":"27","D:\\jobStuff\\hoichistakes\\src\\Pages\\v2Staking.js":"28","D:\\jobStuff\\hoichistakes\\src\\components\\Molecules\\staking\\StakingSection\\v2StakingSection.js":"29","D:\\jobStuff\\hoichistakes\\src\\components\\Molecules\\staking\\StakingTime.js":"30","D:\\jobStuff\\hoichistakes\\src\\components\\Molecules\\staking\\DepositWithdrawSection2.js":"31"},{"size":517,"mtime":1672443697314,"results":"32","hashOfConfig":"33"},{"size":747,"mtime":1676916455751,"results":"34","hashOfConfig":"33"},{"size":375,"mtime":1672443697314,"results":"35","hashOfConfig":"33"},{"size":135,"mtime":1672443697314,"results":"36","hashOfConfig":"33"},{"size":283,"mtime":1672443697299,"results":"37","hashOfConfig":"33"},{"size":1149,"mtime":1672443697299,"results":"38","hashOfConfig":"33"},{"size":390,"mtime":1672443697056,"results":"39","hashOfConfig":"33"},{"size":1083,"mtime":1676996549415,"results":"40","hashOfConfig":"33"},{"size":640,"mtime":1676916455751,"results":"41","hashOfConfig":"33"},{"size":417,"mtime":1672443697299,"results":"42","hashOfConfig":"33"},{"size":18927,"mtime":1677320861959,"results":"43","hashOfConfig":"33"},{"size":1073,"mtime":1672443697314,"results":"44","hashOfConfig":"33"},{"size":2522,"mtime":1676996549415,"results":"45","hashOfConfig":"33"},{"size":285,"mtime":1676996549415,"results":"46","hashOfConfig":"33"},{"size":393,"mtime":1672443697299,"results":"47","hashOfConfig":"33"},{"size":683,"mtime":1672443697314,"results":"48","hashOfConfig":"33"},{"size":558,"mtime":1676916455759,"results":"49","hashOfConfig":"33"},{"size":2040,"mtime":1675868510734,"results":"50","hashOfConfig":"33"},{"size":1424,"mtime":1676996549415,"results":"51","hashOfConfig":"33"},{"size":1946,"mtime":1675868510734,"results":"52","hashOfConfig":"33"},{"size":734,"mtime":1672443697299,"results":"53","hashOfConfig":"33"},{"size":579,"mtime":1672443697314,"results":"54","hashOfConfig":"33"},{"size":11296,"mtime":1676916455759,"results":"55","hashOfConfig":"33"},{"size":473,"mtime":1672443697314,"results":"56","hashOfConfig":"33"},{"size":442,"mtime":1672443697314,"results":"57","hashOfConfig":"33"},{"size":494,"mtime":1672443697299,"results":"58","hashOfConfig":"33"},{"size":709,"mtime":1676916455759,"results":"59","hashOfConfig":"33"},{"size":491,"mtime":1676916455751,"results":"60","hashOfConfig":"33"},{"size":2964,"mtime":1677004096448,"results":"61","hashOfConfig":"33"},{"size":1440,"mtime":1677322270610,"results":"62","hashOfConfig":"33"},{"size":12844,"mtime":1677322259622,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"nl1zai",{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"66"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"66"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135"},"D:\\jobStuff\\hoichistakes\\src\\index.js",[],["136","137"],"D:\\jobStuff\\hoichistakes\\src\\App.js",["138","139"],"import { Provider } from \"react-redux\";\r\nimport store from \"../src/redux/store\";\r\nimport { BackgroundImage as BackgroundComponent } from \"./components/BackgroundImage\";\r\nimport { Header } from \"./components/Header\";\r\nimport { StakingPage } from \"./Pages/stakingPage\";\r\nimport { AppRouter } from \"./containers/AppRouter\";\r\nimport BackgroundImage from \"./assets/images/backgrounds/staking-screen.png\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <BackgroundComponent\r\n        url={BackgroundImage}\r\n        className=\"min-h-screen font-bold\"\r\n      >\r\n        <AppRouter />\r\n      </BackgroundComponent>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\jobStuff\\hoichistakes\\src\\reportWebVitals.js",[],"D:\\jobStuff\\hoichistakes\\src\\redux\\store.js",[],"D:\\jobStuff\\hoichistakes\\src\\components\\BackgroundImage.js",[],"D:\\jobStuff\\hoichistakes\\src\\components\\Header.js",[],"D:\\jobStuff\\hoichistakes\\src\\Pages\\stakingPage.js",[],"D:\\jobStuff\\hoichistakes\\src\\redux\\reducers.js",[],"D:\\jobStuff\\hoichistakes\\src\\components\\Molecules\\DrawerContent.js",[],"D:\\jobStuff\\hoichistakes\\src\\components\\Atoms\\BurguerIcon.js",[],"D:\\jobStuff\\hoichistakes\\src\\Utils\\walletInteract.js",[],"D:\\jobStuff\\hoichistakes\\src\\components\\Molecules\\staking\\MonkSection.js",[],"D:\\jobStuff\\hoichistakes\\src\\components\\Molecules\\staking\\StakingSection\\StakingSection.js",["140"],"/* eslint-disable no-unused-vars */\r\nimport { useState, useEffect } from \"react\";\r\nimport { GeneralDepositInfo } from \"../GeneralDepositInfo\";\r\nimport { GeneralInfo } from \"../GeneralInfo\";\r\nimport { TotalLockedSection } from \"../TotalLockedSection\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { ethers } from \"ethers\";\r\nimport {\r\n  approve,\r\n  getReward,\r\n  getTotalLockedBalance,\r\n  getUserBalance,\r\n  getUserDepositedBalance,\r\n  isApproved,\r\n  stake,\r\n  withdraw,\r\n  harvest,\r\n} from \"../../../../Utils/walletInteract\";\r\nimport {\r\n  SET_REWARD,\r\n  SET_TOTAL_LOCK,\r\n  SET_TOTAL_DEPOSITED,\r\n} from \"../../../../redux/actions\";\r\nexport const StakingSection = () => {\r\n  const [isDepositSection, setIsDepositSection] = useState(true);\r\n  const userReward = useSelector((state) => state.userReward);\r\n  const [userBalance, setUserBalance] = useState(0);\r\n  const [userDepositedBalance, setUserDepositedBalance] = useState(0);\r\n\r\n  const [sheebDepositAmount, setSheebDepositAmount] = useState(0);\r\n  const [currentUserReward, setCurrentUserReward] = useState(0);\r\n  const currentAddress = useSelector((state) => state.address);\r\n  const dispatch = useDispatch();\r\n\r\n  const loadContractData = async () => {\r\n    const _balance = await getUserBalance(currentAddress);\r\n    setUserBalance(_balance);\r\n    const _userDepositedBalance = await getUserDepositedBalance(currentAddress);\r\n    setUserDepositedBalance(_userDepositedBalance);\r\n    dispatch({ type: SET_TOTAL_DEPOSITED, payload: _userDepositedBalance });\r\n    const _totalLockedBalance = await getTotalLockedBalance();\r\n    dispatch({ type: SET_TOTAL_LOCK, payload: _totalLockedBalance });\r\n    const _userReward = await getReward(currentAddress);\r\n    setCurrentUserReward(_userReward);\r\n    dispatch({ type: SET_REWARD, payload: _userReward });\r\n  };\r\n  useEffect(() => {\r\n    if (currentAddress !== \"\") {\r\n      loadContractData();\r\n      console.log(`hi, ${currentAddress}`);\r\n      console.log(`hi, ${userBalance}`);\r\n      console.log(userDepositedBalance);\r\n    }\r\n  }, [currentAddress]);\r\n\r\n  return (\r\n    <div className=\"w-full lg:w-3/5 mb-10 lg:mb-20 flex flex-col lg:flex-row items-center justify-center gap-5 h-full w-full\">\r\n      <div className=\"flex-1 w-full h-5/6 flex flex-col gap-5\">\r\n        <GeneralInfo\r\n          isDepositSection={isDepositSection}\r\n          toggleDepositSection={(e) => setIsDepositSection(e)}\r\n        />\r\n        <GeneralDepositInfo />\r\n      </div>\r\n      <TotalLockedSection />\r\n    </div>\r\n  );\r\n};\r\n","D:\\jobStuff\\hoichistakes\\src\\redux\\actions.js",[],"D:\\jobStuff\\hoichistakes\\src\\components\\Atoms\\Button.js",[],"D:\\jobStuff\\hoichistakes\\src\\theme\\theme.js",[],"D:\\jobStuff\\hoichistakes\\src\\constants\\routes.js",[],"D:\\jobStuff\\hoichistakes\\src\\components\\Molecules\\staking\\GeneralDepositInfo.js",["141","142","143"],"import { useState } from \"react\";\r\nimport Background from \"../../../assets/images/backgrounds/Asset 116.png\";\r\nimport { TEXT_COLORS } from \"../../../theme/theme\";\r\nimport { BackgroundOpacity } from \"../../../containers/BackgroundOpacity\";\r\nimport { useEffect } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nexport const GeneralDepositInfo = () => {\r\n  const pendingReward = useSelector((state) =>\r\n    Math.round(ethers.utils.formatEther(state.userReward))\r\n  );\r\n  const [unlockTime /* setUnlockTime */] = useState(\"No lock\");\r\n  const userAddress = useSelector((state) => state.address);\r\n  const amountDeposited = useSelector((state) => state.totalDeposited);\r\n\r\n  return (\r\n    <BackgroundOpacity\r\n      backgroundSrc={Background}\r\n      containerClasses={`h-40 lg:h-1/3 w-full border-2 border-white rounded-lg ${TEXT_COLORS.WHITE}`}\r\n      contentClasses=\"flex items-center justify-between gap-1 font-noto-sans-bold text-center px-2\"\r\n    >\r\n      <div className=\"h-full w-full flex flex-col justify-center text-center gap-8 py-5\">\r\n        <h3 className=\"flex-1 flex items-center justify-center sm:flex-none\">\r\n          Pending Reward\r\n        </h3>\r\n        <p className={`text-2xl sm:text-3xl ${TEXT_COLORS.PURPLE_DARK}`}>\r\n          {pendingReward}\r\n        </p>\r\n      </div>\r\n      <div className=\"h-full w-full flex flex-col justify-center gap-8 py-5\">\r\n        <h3 className=\"flex-1 flex items-center justify-center sm:flex-none\">\r\n          Amount Deposited\r\n        </h3>\r\n        <p className={`text-2xl sm:text-3xl ${TEXT_COLORS.PURPLE_DARK}`}>\r\n          {amountDeposited}\r\n        </p>\r\n      </div>\r\n      <div className=\"h-full w-full flex flex-col justify-center gap-8 py-5\">\r\n        <h3 className=\"flex-1 flex items-center justify-center sm:flex-none\">\r\n          Unlock Time\r\n        </h3>\r\n        <p className={`text-2xl sm:text-3xl ${TEXT_COLORS.PURPLE_DARK}`}>\r\n          {unlockTime}\r\n        </p>\r\n      </div>\r\n    </BackgroundOpacity>\r\n  );\r\n};\r\n","D:\\jobStuff\\hoichistakes\\src\\components\\Molecules\\staking\\GeneralInfo.js",["144"],"import { BackgroundOpacity } from \"../../../containers/BackgroundOpacity\";\r\nimport Background from \"../../../assets/images/backgrounds/Asset 114-Gray-bg.png\";\r\nimport GreenBackground from \"../../../assets/images/backgrounds/Asset 114-Section.png\";\r\nimport { DepositWithdrawSection } from \"./DepositWithdrawSection\";\r\nimport { DepositWithdrawSection2 } from \"./DepositWithdrawSection2\";\r\nimport { RecentActions } from \"./RecentActions\";\r\n\r\nexport const GeneralInfo = ({\r\n  isV2Staking = false,\r\n  isDepositSection = true,\r\n  toggleDepositSection = () => {},\r\n}) => (\r\n  <div className=\"h-40 min-h-400 lg:h-2/3 w-full border-2 border-white flex rounded-lg\">\r\n    <img\r\n      src={GreenBackground}\r\n      alt=\"green-background\"\r\n      className=\"h-full w-1/4 hidden md:block\"\r\n    />\r\n    <BackgroundOpacity\r\n      backgroundSrc={Background}\r\n      containerClasses=\"flex-1\"\r\n      contentClasses=\"flex flex-col p-5\"\r\n    >\r\n        { !isV2Staking ?\r\n            <DepositWithdrawSection\r\n                isV2Staking={isV2Staking}\r\n                isDepositSection={isDepositSection}\r\n                toggleDepositSection={toggleDepositSection}\r\n            /> :\r\n            <DepositWithdrawSection2\r\n                isV2Staking={isV2Staking}\r\n                isDepositSection={isDepositSection}\r\n                toggleDepositSection={toggleDepositSection}\r\n            />\r\n        }\r\n\r\n    </BackgroundOpacity>\r\n  </div>\r\n);\r\n","D:\\jobStuff\\hoichistakes\\src\\components\\Molecules\\staking\\TotalLockedSection.js",["145","146","147","148","149"],"import { useState } from \"react\";\r\nimport { BackgroundOpacity } from \"../../../containers/BackgroundOpacity\";\r\nimport TotalLockedSecionBackground from \"../../../assets/images/backgrounds/Asset 115.png\";\r\nimport { TEXT_COLORS } from \"../../../theme/theme\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { ethers } from \"ethers\";\r\nimport {\r\n  getReward,\r\n  getTotalLockedBalance,\r\n} from \"../../../Utils/walletInteract\";\r\nexport const TotalLockedSection = () => {\r\n  const totalLocked = useSelector((state) => state.totalLock);\r\n  const totalUserReward = useSelector((state) =>\r\n    ethers.utils.formatEther(state.userReward)\r\n  );\r\n  const [tokenPrices /* setTokenPrices */] = useState(0.0000000012);\r\n  const [apr /* setApr */] = useState(62);\r\n  const currentAddress = useSelector((state) => state.address);\r\n\r\n  return (\r\n    <BackgroundOpacity\r\n      backgroundSrc={TotalLockedSecionBackground}\r\n      containerClasses=\"h-40 w-full lg:w-1/3 lg:h-5/6 border-2 border-white rounded-lg min-h-400\"\r\n      contentClasses=\"text-white flex flex-col items-center h-full justify-between gap-1 font-noto-sans-bold text-xl text-center\"\r\n    >\r\n      <div className=\"h-full w-full flex flex-col items-center justify-center\">\r\n        <h3>Total Locked</h3>\r\n        <p className={TEXT_COLORS.PURPLE_DARK}>\r\n          {Math.round(totalLocked)} HOICHI\r\n        </p>\r\n      </div>\r\n      <div className=\"h-full w-full flex flex-col items-center justify-center\">\r\n        <h3>Token Prices</h3>\r\n        <p className={TEXT_COLORS.PURPLE_DARK}>${tokenPrices}</p>\r\n      </div>\r\n      <div className=\"h-full w-full flex flex-col items-center justify-center\">\r\n        <h3>Total User Reward</h3>\r\n        <p className={TEXT_COLORS.PURPLE_DARK}>\r\n          {Math.round(totalUserReward)} HOICHI\r\n        </p>\r\n      </div>\r\n      <div className=\"h-full w-full flex flex-col items-center justify-center\"></div>\r\n    </BackgroundOpacity>\r\n  );\r\n};\r\n","D:\\jobStuff\\hoichistakes\\src\\components\\BackgroundButton\\BackgroundButton.js",[],"D:\\jobStuff\\hoichistakes\\src\\components\\Molecules\\staking\\RecentActions.js",[],"D:\\jobStuff\\hoichistakes\\src\\components\\Molecules\\staking\\DepositWithdrawSection.js",["150","151","152","153","154","155","156"],"/* eslint-disable no-unused-expressions */\r\nimport { useState, useEffect } from \"react\";\r\nimport { BackgroundButton } from \"../../BackgroundButton/BackgroundButton\";\r\nimport { TEXT_COLORS } from \"../../../theme/theme\";\r\nimport { Input } from \"../../Atoms/Input\";\r\nimport { getUserBalance } from \"../../../Utils/walletInteract\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  isApproved,\r\n  stake,\r\n  withdraw,\r\n  harvest,\r\n  approve,\r\n  getUserDepositedBalance,\r\n  getReward,\r\n} from \"../../../Utils/walletInteract\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport { DEFAULT_STAKING_OPTION, StakingTime } from \"./StakingTime\";\r\nconst GO_TO_DEPOSIT = true;\r\nconst GO_TO_WITHDRAW = false;\r\n\r\nexport const DepositWithdrawSection = ({\r\n  isV2Staking = false,\r\n  isDepositSection = true,\r\n  toggleDepositSection = () => { },\r\n}) => {\r\n  const [userBalance, setUserBalance] = useState(100);\r\n  const text = isDepositSection ? \"Deposit\" : \"Withdraw\";\r\n  //const approveText = _isApproved ? \"Approve\" : \"Deposit\";\r\n  const [approvalStatus, setApprovalStatus] = useState(false);\r\n  const [stakingTime, setStakingTime] = useState(DEFAULT_STAKING_OPTION);\r\n  const [inputAmout, setInputAmount] = useState(0);\r\n  const currentAddress = useSelector((state) => state.address);\r\n  const userDepositedBalance = useSelector((state) => state.totalDeposited);\r\n  const userReward = useSelector((state) => state.userReward);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleDepositClick = () => {\r\n    if (approvalStatus) {\r\n      if (inputAmout === 0) return;\r\n      const transaction = toast.loading(\"Tx pending\");\r\n      stake(currentAddress, inputAmout)\r\n        .then((res) => {\r\n          toast.update(transaction, {\r\n            render: \"Succesfully staked\",\r\n            type: \"success\",\r\n            isLoading: false,\r\n            autoClose: 3000,\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          if (error.code === 4001) {\r\n            toast.update(transaction, {\r\n              render:\r\n                \"MetaMask Tx Signature: User denied transaction signature.\",\r\n              type: \"error\",\r\n              isLoading: false,\r\n              autoClose: 3000,\r\n            });\r\n          } else {\r\n            toast.update(transaction, {\r\n              render: error.message || \"Error\",\r\n              type: \"error\",\r\n              isLoading: false,\r\n              autoClose: 3000,\r\n            });\r\n          }\r\n        });\r\n    } else {\r\n      const transaction = toast.loading(\"Transaction pending\");\r\n      approve(currentAddress)\r\n        .then((res) => {\r\n          loadUserData();\r\n          toast.update(transaction, {\r\n            render: \"Successfully approved\",\r\n            type: \"success\",\r\n            isLoading: false,\r\n            autoClose: 3000,\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          if (error.code === 4001) {\r\n            toast.update(transaction, {\r\n              render:\r\n                \"MetaMask Tx Signature: User denied transaction signature.\",\r\n              type: \"error\",\r\n              isLoading: false,\r\n              autoClose: 3000,\r\n            });\r\n          } else {\r\n            toast.update(transaction, {\r\n              render: error.message || \"Error\",\r\n              type: \"error\",\r\n              isLoading: false,\r\n              autoClose: 3000,\r\n            });\r\n          }\r\n        });\r\n    }\r\n  };\r\n  const handleDepositAllClick = () => {\r\n    if (approvalStatus) {\r\n      if (userBalance === 0) return;\r\n      const transaction = toast.loading(\"Transaction pending\");\r\n      stake(currentAddress, userBalance)\r\n        .then((res) => {\r\n          loadUserData();\r\n          toast.update(transaction, {\r\n            render: \"Successfully staked all\",\r\n            type: \"success\",\r\n            isLoading: false,\r\n            autoClose: 3000,\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          if (error.code === 4001) {\r\n            toast.update(transaction, {\r\n              render:\r\n                \"MetaMask Tx Signature: User denied transaction signature.\",\r\n              type: \"error\",\r\n              isLoading: false,\r\n              autoClose: 3000,\r\n            });\r\n          } else {\r\n            toast.update(transaction, {\r\n              render: error.message || \"Error\",\r\n              type: \"error\",\r\n              isLoading: false,\r\n              autoClose: 3000,\r\n            });\r\n          }\r\n        });\r\n    } else {\r\n      const transaction = toast.loading(\"Transaction pending\");\r\n      approve(currentAddress)\r\n        .then((res) => {\r\n          toast.update(transaction, {\r\n            render: \"Successfully approved\",\r\n            type: \"success\",\r\n            isLoading: false,\r\n            autoClose: 3000,\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          if (error.code === 4001) {\r\n            toast.update(transaction, {\r\n              render:\r\n                \"MetaMask Tx Signature: User denied transaction signature.\",\r\n              type: \"error\",\r\n              isLoading: false,\r\n              autoClose: 3000,\r\n            });\r\n          } else {\r\n            toast.update(transaction, {\r\n              render: error.message || \"Error\",\r\n              type: \"error\",\r\n              isLoading: false,\r\n              autoClose: 3000,\r\n            });\r\n          }\r\n        });\r\n    }\r\n  };\r\n  const handleWithdrawClick = () => {\r\n    console.log(`hi${userDepositedBalance}`);\r\n    if (inputAmout === 0 || userDepositedBalance == 0) return;\r\n    const transaction = toast.loading(\"Transaction pending\");\r\n    withdraw(currentAddress, inputAmout)\r\n      .then((res) => {\r\n        loadUserData();\r\n        toast.update(transaction, {\r\n          render: \"Successfully withdrawed\",\r\n          type: \"success\",\r\n          isLoading: false,\r\n          autoClose: 3000,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        if (error.code === 4001) {\r\n          toast.update(transaction, {\r\n            render: \"MetaMask Tx Signature: User denied transaction signature.\",\r\n            type: \"error\",\r\n            isLoading: false,\r\n            autoClose: 3000,\r\n          });\r\n        } else {\r\n          toast.update(transaction, {\r\n            render: error.message || \"Error\",\r\n            type: \"error\",\r\n            isLoading: false,\r\n            autoClose: 3000,\r\n          });\r\n        }\r\n      });\r\n  };\r\n  const handleWithdrawAllClick = () => {\r\n    console.log(`hi ${userDepositedBalance}`);\r\n    if (userDepositedBalance == 0) return;\r\n    const transaction = toast.loading(\"Transaction pending\");\r\n    withdraw(currentAddress, userDepositedBalance)\r\n      .then((res) => {\r\n        loadUserData();\r\n        toast.update(transaction, {\r\n          render: \"Successfully withdrawed all\",\r\n          type: \"success\",\r\n          isLoading: false,\r\n          autoClose: 3000,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        if (error.code === 4001) {\r\n          toast.update(transaction, {\r\n            render: \"MetaMask Tx Signature: User denied transaction signature.\",\r\n            type: \"error\",\r\n            isLoading: false,\r\n            autoClose: 3000,\r\n          });\r\n        } else {\r\n          toast.update(transaction, {\r\n            render: error.message || \"Error\",\r\n            type: \"error\",\r\n            isLoading: false,\r\n            autoClose: 3000,\r\n          });\r\n        }\r\n      });\r\n  };\r\n  const handleHarvestClick = () => {\r\n    if (userReward == 0) return;\r\n    const transaction = toast.loading(\"Transaction pending\");\r\n    harvest(currentAddress)\r\n      .then((res) => {\r\n        loadUserData();\r\n        toast.update(transaction, {\r\n          render: \"Successfully harvested all\",\r\n          type: \"success\",\r\n          isLoading: false,\r\n          autoClose: 3000,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        if (error.code === 4001) {\r\n          toast.update(transaction, {\r\n            render: \"MetaMask Tx Signature: User denied transaction signature.\",\r\n            type: \"error\",\r\n            isLoading: false,\r\n            autoClose: 3000,\r\n          });\r\n        } else {\r\n          toast.update(transaction, {\r\n            render: error.message || \"Error\",\r\n            type: \"error\",\r\n            isLoading: false,\r\n            autoClose: 3000,\r\n          });\r\n        }\r\n      });\r\n  };\r\n\r\n  const loadUserData = async () => {\r\n    const _isApproved = await isApproved(currentAddress);\r\n    setApprovalStatus(_isApproved);\r\n    console.log(_isApproved);\r\n    const _balance = await getUserBalance(currentAddress);\r\n    setUserBalance(_balance);\r\n  };\r\n  useEffect(() => {\r\n    if (currentAddress !== \"\") {\r\n      loadUserData();\r\n      console.log(`hi, ${currentAddress}`);\r\n      console.log(`hi, ${userBalance}`);\r\n    }\r\n  }, [currentAddress]);\r\n  return (\r\n    <div className=\"flex-1\">\r\n      <div className=\"w-full h-full flex flex-col gap-3\">\r\n        <div className=\"flex gap-3\">\r\n          <BackgroundButton\r\n            isGray={!isDepositSection}\r\n            onClick={() => toggleDepositSection(GO_TO_DEPOSIT)}\r\n          >\r\n            Deposit\r\n          </BackgroundButton>\r\n          <BackgroundButton\r\n            isGray={isDepositSection}\r\n            onClick={() => toggleDepositSection(GO_TO_WITHDRAW)}\r\n          >\r\n            Withdraw\r\n          </BackgroundButton>\r\n        </div>\r\n        <p className={`font-noto-sans-regular ${TEXT_COLORS.WHITE}`}>\r\n          Balance:{\" \"}\r\n          <span className={`font-noto-sans-bold ${TEXT_COLORS.PURPLE_DARK}`}>\r\n            {userBalance} $ HOICHI\r\n          </span>\r\n        </p>\r\n        <Input\r\n          type=\"number\"\r\n          value={inputAmout}\r\n          placeholder={`HOICHI ${text} Amount...`}\r\n          onChange={setInputAmount}\r\n        />\r\n        <div className=\"flex justify-between gap-3\">\r\n          <BackgroundButton\r\n            isGray={false}\r\n            className=\"flex-1\"\r\n            onClick={() => {\r\n              if (isDepositSection) {\r\n                handleDepositClick();\r\n              } else {\r\n                handleWithdrawClick();\r\n              }\r\n            }}\r\n          >\r\n            {text}\r\n          </BackgroundButton>\r\n          <BackgroundButton\r\n            isGray={false}\r\n            className=\"flex-1\"\r\n            onClick={() => {\r\n              if (isDepositSection) {\r\n                handleDepositAllClick();\r\n              } else {\r\n                handleWithdrawAllClick();\r\n              }\r\n            }}\r\n          >\r\n            {`${text} All`}\r\n          </BackgroundButton>\r\n          <BackgroundButton\r\n            isGray={false}\r\n            className=\"flex-1\"\r\n            onClick={handleHarvestClick}\r\n          >\r\n            Harvest\r\n          </BackgroundButton>\r\n        </div>\r\n        {\r\n          isDepositSection && isV2Staking && (\r\n            <StakingTime selected={stakingTime}  onSelect={setStakingTime}/>\r\n          )\r\n        }\r\n      </div>\r\n      <ToastContainer\r\n        className=\"text-white\"\r\n        position=\"top-right\"\r\n        autoClose={5000}\r\n        hideProgressBar={false}\r\n        newestOnTop={false}\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n        theme=\"colored\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","D:\\jobStuff\\hoichistakes\\src\\containers\\BackgroundOpacity.js",[],"D:\\jobStuff\\hoichistakes\\src\\components\\Molecules\\staking\\RecentActionRow.js",[],"D:\\jobStuff\\hoichistakes\\src\\components\\Atoms\\Input.js",[],"D:\\jobStuff\\hoichistakes\\src\\containers\\AppRouter.js",[],"D:\\jobStuff\\hoichistakes\\src\\Pages\\v2Staking.js",["157"],"import { MonkSection } from \"../components/Molecules/staking/MonkSection\";\r\nimport { StakingSection } from \"../components/Molecules/staking/StakingSection/StakingSection\";\r\nimport { V2StakingSection } from \"../components/Molecules/staking/StakingSection/v2StakingSection\";\r\n\r\nexport const V2staking = () => (\r\n  <div className=\"relative mx-auto flex justify-between flex-col lg:flex-row items-stretch w-11/12 gap-5 h-90-screen\">\r\n    <MonkSection />\r\n    <V2StakingSection />\r\n  </div>\r\n);\r\n","D:\\jobStuff\\hoichistakes\\src\\components\\Molecules\\staking\\StakingSection\\v2StakingSection.js",["158"],"/* eslint-disable no-unused-vars */\r\nimport { useState, useEffect } from \"react\";\r\nimport { GeneralDepositInfo } from \"../GeneralDepositInfo\";\r\nimport { GeneralInfo } from \"../GeneralInfo\";\r\nimport { TotalLockedSection } from \"../TotalLockedSection\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  getTotalLockedBalance2,\r\n  getUserBalance,\r\n  getUserDepositedBalance2,\r\n  getStakingList,\r\n} from \"../../../../Utils/walletInteract\";\r\nimport {\r\n  SET_REWARD,\r\n  SET_TOTAL_LOCK,\r\n  SET_TOTAL_DEPOSITED,\r\n  SET_STAKING_LIST,\r\n} from \"../../../../redux/actions\";\r\nexport const V2StakingSection = () => {\r\n  const [isDepositSection, setIsDepositSection] = useState(true);\r\n  const userReward = useSelector((state) => state.userReward);\r\n  const [userBalance, setUserBalance] = useState(0);\r\n  const [userDepositedBalance, setUserDepositedBalance] = useState(0);\r\n  ////\r\n  const [sheebDepositAmount, setSheebDepositAmount] = useState(0);\r\n  const [currentUserReward, setCurrentUserReward] = useState(0);\r\n  const currentAddress = useSelector((state) => state.address);\r\n  const dispatch = useDispatch();\r\n\r\n  const loadContractData = async () => {\r\n    const _balance = await getUserBalance(currentAddress);\r\n    setUserBalance(_balance);\r\n    // const _userDepositedBalance = await getUserDepositedBalance2(currentAddress);\r\n    // setUserDepositedBalance(_userDepositedBalance);\r\n    // dispatch({ type: SET_TOTAL_DEPOSITED, payload: _userDepositedBalance });\r\n    const _totalLockedBalance = await getTotalLockedBalance2();\r\n    console.log(\"total locked\", _totalLockedBalance);\r\n    dispatch({ type: SET_TOTAL_LOCK, payload: _totalLockedBalance });\r\n    const [_stakingList, _userReward, _depositedAmount] = await getStakingList(\r\n      currentAddress\r\n    );\r\n    console.log(\"staking list ------\", _stakingList);\r\n    dispatch({ type: SET_STAKING_LIST, payload: _stakingList });\r\n    console.log(\"_userReward---\", _userReward);\r\n    // const _userReward = await getReward2(currentAddress);\r\n    setCurrentUserReward(_userReward);\r\n    dispatch({ type: SET_REWARD, payload: _userReward });\r\n    setUserDepositedBalance(_depositedAmount);\r\n    dispatch({ type: SET_TOTAL_DEPOSITED, payload: _depositedAmount });\r\n  };\r\n  useEffect(() => {\r\n    if (currentAddress !== \"\") {\r\n      loadContractData();\r\n      console.log(`hi, ${currentAddress}`);\r\n      console.log(`hi, ${userBalance}`);\r\n      console.log(userDepositedBalance);\r\n    }\r\n  }, [currentAddress]);\r\n\r\n  return (\r\n    <div className=\"w-full lg:w-3/5 mb-10 lg:mb-20 flex flex-col lg:flex-row items-center justify-center gap-5 h-full w-full\">\r\n      <div className=\"flex-1 w-full h-5/6 flex flex-col gap-5\">\r\n        <GeneralInfo\r\n          isV2Staking={true}\r\n          isDepositSection={isDepositSection}\r\n          toggleDepositSection={(e) => setIsDepositSection(e)}\r\n        />\r\n        <GeneralDepositInfo />\r\n      </div>\r\n      <TotalLockedSection />\r\n    </div>\r\n  );\r\n};\r\n","D:\\jobStuff\\hoichistakes\\src\\components\\Molecules\\staking\\StakingTime.js",[],"D:\\jobStuff\\hoichistakes\\src\\components\\Molecules\\staking\\DepositWithdrawSection2.js",["159","160","161","162"],"/* eslint-disable no-unused-expressions */\r\nimport { useState, useEffect } from \"react\";\r\nimport { BackgroundButton } from \"../../BackgroundButton/BackgroundButton\";\r\nimport { TEXT_COLORS } from \"../../../theme/theme\";\r\nimport { Input } from \"../../Atoms/Input\";\r\nimport { getUserBalance } from \"../../../Utils/walletInteract\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  isApproved2,\r\n  stake2,\r\n  withdraw2,\r\n  harvest2,\r\n  approve2,\r\n} from \"../../../Utils/walletInteract\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport { DEFAULT_STAKING_OPTION, StakingTime } from \"./StakingTime\";\r\nconst GO_TO_DEPOSIT = true;\r\nconst GO_TO_WITHDRAW = false;\r\nconst lockTimes = [\"7 days\", \"15 days\", \"1 month\", \"12 months\"];\r\n\r\nexport const DepositWithdrawSection2 = ({\r\n  isV2Staking = false,\r\n  isDepositSection = true,\r\n  toggleDepositSection = () => {},\r\n}) => {\r\n  const [userBalance, setUserBalance] = useState(100);\r\n  // const [stakintList, setStakingList] = useState([]);\r\n  const text = isDepositSection ? \"Deposit\" : \"Withdraw\";\r\n  //const approveText = _isApproved ? \"Approve\" : \"Deposit\";\r\n  const [approvalStatus, setApprovalStatus] = useState(false);\r\n  const [stakingTime, setStakingTime] = useState(DEFAULT_STAKING_OPTION);\r\n  const [inputAmout, setInputAmount] = useState(0);\r\n  const currentAddress = useSelector((state) => state.address);\r\n  const userDepositedBalance = useSelector((state) => state.totalDeposited);\r\n  const stakingList = useSelector((state) => [...state.stakingList]);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleDepositClick = () => {\r\n    if (approvalStatus) {\r\n      if (inputAmout === 0) return;\r\n      const transaction = toast.loading(\"Tx pending\");\r\n      stake2(currentAddress, inputAmout, stakingTime)\r\n        .then((res) => {\r\n          toast.update(transaction, {\r\n            render: \"Succesfully staked\",\r\n            type: \"success\",\r\n            isLoading: false,\r\n            autoClose: 3000,\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          if (error.code === 4001) {\r\n            toast.update(transaction, {\r\n              render:\r\n                \"MetaMask Tx Signature: User denied transaction signature.\",\r\n              type: \"error\",\r\n              isLoading: false,\r\n              autoClose: 3000,\r\n            });\r\n          } else {\r\n            toast.update(transaction, {\r\n              render: error.message || \"Error\",\r\n              type: \"error\",\r\n              isLoading: false,\r\n              autoClose: 3000,\r\n            });\r\n          }\r\n        });\r\n    } else {\r\n      const transaction = toast.loading(\"Transaction pending\");\r\n      approve2(currentAddress)\r\n        .then((res) => {\r\n          loadUserData();\r\n          toast.update(transaction, {\r\n            render: \"Successfully approved\",\r\n            type: \"success\",\r\n            isLoading: false,\r\n            autoClose: 3000,\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          if (error.code === 4001) {\r\n            toast.update(transaction, {\r\n              render:\r\n                \"MetaMask Tx Signature: User denied transaction signature.\",\r\n              type: \"error\",\r\n              isLoading: false,\r\n              autoClose: 3000,\r\n            });\r\n          } else {\r\n            toast.update(transaction, {\r\n              render: error.message || \"Error\",\r\n              type: \"error\",\r\n              isLoading: false,\r\n              autoClose: 3000,\r\n            });\r\n          }\r\n        });\r\n    }\r\n  };\r\n  const handleDepositAllClick = () => {\r\n    if (approvalStatus) {\r\n      if (userBalance === 0) return;\r\n      const transaction = toast.loading(\"Transaction pending\");\r\n      stake2(currentAddress, userBalance)\r\n        .then((res) => {\r\n          loadUserData();\r\n          toast.update(transaction, {\r\n            render: \"Successfully staked all\",\r\n            type: \"success\",\r\n            isLoading: false,\r\n            autoClose: 3000,\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          if (error.code === 4001) {\r\n            toast.update(transaction, {\r\n              render:\r\n                \"MetaMask Tx Signature: User denied transaction signature.\",\r\n              type: \"error\",\r\n              isLoading: false,\r\n              autoClose: 3000,\r\n            });\r\n          } else {\r\n            toast.update(transaction, {\r\n              render: error.message || \"Error\",\r\n              type: \"error\",\r\n              isLoading: false,\r\n              autoClose: 3000,\r\n            });\r\n          }\r\n        });\r\n    } else {\r\n      const transaction = toast.loading(\"Transaction pending\");\r\n      approve2(currentAddress)\r\n        .then((res) => {\r\n          toast.update(transaction, {\r\n            render: \"Successfully approved\",\r\n            type: \"success\",\r\n            isLoading: false,\r\n            autoClose: 3000,\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          if (error.code === 4001) {\r\n            toast.update(transaction, {\r\n              render:\r\n                \"MetaMask Tx Signature: User denied transaction signature.\",\r\n              type: \"error\",\r\n              isLoading: false,\r\n              autoClose: 3000,\r\n            });\r\n          } else {\r\n            toast.update(transaction, {\r\n              render: error.message || \"Error\",\r\n              type: \"error\",\r\n              isLoading: false,\r\n              autoClose: 3000,\r\n            });\r\n          }\r\n        });\r\n    }\r\n  };\r\n  const handleWithdrawClick = (stakingId) => {\r\n    console.log(`hi${userDepositedBalance}`);\r\n    // if (inputAmout === 0 || userDepositedBalance == 0) return;\r\n    const transaction = toast.loading(\"Transaction pending\");\r\n    withdraw2(currentAddress, stakingId)\r\n      .then((res) => {\r\n        loadUserData();\r\n        toast.update(transaction, {\r\n          render: \"Successfully withdrawed\",\r\n          type: \"success\",\r\n          isLoading: false,\r\n          autoClose: 3000,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        if (error.code === 4001) {\r\n          toast.update(transaction, {\r\n            render: \"MetaMask Tx Signature: User denied transaction signature.\",\r\n            type: \"error\",\r\n            isLoading: false,\r\n            autoClose: 3000,\r\n          });\r\n        } else {\r\n          toast.update(transaction, {\r\n            render: error.message || \"Error\",\r\n            type: \"error\",\r\n            isLoading: false,\r\n            autoClose: 3000,\r\n          });\r\n        }\r\n      });\r\n  };\r\n  const handleWithdrawAllClick = () => {\r\n    console.log(`hi ${userDepositedBalance}`);\r\n    if (userDepositedBalance == 0) return;\r\n    const transaction = toast.loading(\"Transaction pending\");\r\n    withdraw2(currentAddress, userDepositedBalance)\r\n      .then((res) => {\r\n        loadUserData();\r\n        toast.update(transaction, {\r\n          render: \"Successfully withdrawed all\",\r\n          type: \"success\",\r\n          isLoading: false,\r\n          autoClose: 3000,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        if (error.code === 4001) {\r\n          toast.update(transaction, {\r\n            render: \"MetaMask Tx Signature: User denied transaction signature.\",\r\n            type: \"error\",\r\n            isLoading: false,\r\n            autoClose: 3000,\r\n          });\r\n        } else {\r\n          toast.update(transaction, {\r\n            render: error.message || \"Error\",\r\n            type: \"error\",\r\n            isLoading: false,\r\n            autoClose: 3000,\r\n          });\r\n        }\r\n      });\r\n  };\r\n  const handleHarvestClick = (stakingId) => {\r\n    // if (userReward == 0) return;\r\n    const transaction = toast.loading(\"Transaction pending\");\r\n    harvest2(currentAddress, stakingId)\r\n      .then((res) => {\r\n        loadUserData();\r\n        toast.update(transaction, {\r\n          render: \"Successfully harvested all\",\r\n          type: \"success\",\r\n          isLoading: false,\r\n          autoClose: 3000,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        if (error.code === 4001) {\r\n          toast.update(transaction, {\r\n            render: \"MetaMask Tx Signature: User denied transaction signature.\",\r\n            type: \"error\",\r\n            isLoading: false,\r\n            autoClose: 3000,\r\n          });\r\n        } else {\r\n          toast.update(transaction, {\r\n            render: error.message || \"Error\",\r\n            type: \"error\",\r\n            isLoading: false,\r\n            autoClose: 3000,\r\n          });\r\n        }\r\n      });\r\n  };\r\n\r\n  const loadUserData = async () => {\r\n    console.log(\"load user data\");\r\n    const _isApproved = await isApproved2(currentAddress);\r\n    setApprovalStatus(_isApproved);\r\n    console.log(_isApproved);\r\n    const _balance = await getUserBalance(currentAddress);\r\n    setUserBalance(_balance);\r\n    // const _stakingList = await getStakingList(currentAddress);\r\n    // console.log('stakingList', _stakingList)\r\n    // setStakingList([..._stakingList])\r\n  };\r\n  useEffect(() => {\r\n    if (currentAddress !== \"\") {\r\n      loadUserData();\r\n      console.log(`hi, ${currentAddress}`);\r\n      console.log(`hi, ${userBalance}`);\r\n    }\r\n  }, [currentAddress]);\r\n  return (\r\n    <div className=\"flex-1\">\r\n      <div className=\"w-full h-full flex flex-col gap-3\">\r\n        <div className=\"flex gap-3\">\r\n          <BackgroundButton\r\n            isGray={!isDepositSection}\r\n            onClick={() => toggleDepositSection(GO_TO_DEPOSIT)}\r\n          >\r\n            Deposit\r\n          </BackgroundButton>\r\n          <BackgroundButton\r\n            isGray={isDepositSection}\r\n            onClick={() => toggleDepositSection(GO_TO_WITHDRAW)}\r\n          >\r\n            Withdraw\r\n          </BackgroundButton>\r\n        </div>\r\n        <p className={`font-noto-sans-regular ${TEXT_COLORS.WHITE}`}>\r\n          Balance:{\" \"}\r\n          <span className={`font-noto-sans-bold ${TEXT_COLORS.PURPLE_DARK}`}>\r\n            {userBalance} $ HOICHI\r\n          </span>\r\n        </p>\r\n        {isDepositSection && (\r\n          <>\r\n            <Input\r\n              type=\"number\"\r\n              value={inputAmout}\r\n              placeholder={`HOICHI ${text} Amount...`}\r\n              onChange={setInputAmount}\r\n            />\r\n            <div className=\"flex justify-between gap-3\">\r\n              <BackgroundButton\r\n                isGray={false}\r\n                className=\"flex-1\"\r\n                onClick={() => {\r\n                  if (isDepositSection) {\r\n                    handleDepositClick();\r\n                  } else {\r\n                    // handleWithdrawClick();\r\n                  }\r\n                }}\r\n              >\r\n                {text}\r\n              </BackgroundButton>\r\n              <BackgroundButton\r\n                isGray={false}\r\n                className=\"flex-1\"\r\n                onClick={() => {\r\n                  if (isDepositSection) {\r\n                    handleDepositAllClick();\r\n                  } else {\r\n                    // handleWithdrawAllClick();\r\n                  }\r\n                }}\r\n              >\r\n                {`${text} All`}\r\n              </BackgroundButton>\r\n              <BackgroundButton\r\n                isGray={false}\r\n                className=\"flex-1\"\r\n                // onClick={handleHarvestClick}\r\n              >\r\n                Harvest\r\n              </BackgroundButton>\r\n            </div>\r\n          </>\r\n        )}\r\n\r\n        {isDepositSection && isV2Staking && (\r\n          <StakingTime selected={stakingTime} onSelect={setStakingTime} />\r\n        )}\r\n        {!isDepositSection &&\r\n          stakingList &&\r\n          stakingList.map((staking) => {\r\n            return (\r\n              <div\r\n                key={staking.stakingId}\r\n                className=\"flex justify-between gap-3\"\r\n              >\r\n                <p>{staking.amount}</p>\r\n                <p>{staking.claimableAmount}</p>\r\n                <p>{lockTimes[staking.stakingtype]}</p>\r\n                <BackgroundButton\r\n                  isGray={false}\r\n                  className=\"flex-1\"\r\n                  onClick={() => handleWithdrawClick(staking.stakingId)}\r\n                >\r\n                  Unstake\r\n                </BackgroundButton>\r\n                <BackgroundButton\r\n                  isGray={false}\r\n                  className=\"flex-1\"\r\n                  onClick={() => handleHarvestClick(staking.stakingId)}\r\n                >\r\n                  Harvest\r\n                </BackgroundButton>\r\n              </div>\r\n            );\r\n          })}\r\n      </div>\r\n      <ToastContainer\r\n        className=\"text-white\"\r\n        position=\"top-right\"\r\n        autoClose={5000}\r\n        hideProgressBar={false}\r\n        newestOnTop={false}\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n        theme=\"colored\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n",{"ruleId":"163","replacedBy":"164"},{"ruleId":"165","replacedBy":"166"},{"ruleId":"167","severity":1,"message":"168","line":4,"column":10,"nodeType":"169","messageId":"170","endLine":4,"endColumn":16},{"ruleId":"167","severity":1,"message":"171","line":5,"column":10,"nodeType":"169","messageId":"170","endLine":5,"endColumn":21},{"ruleId":"172","severity":1,"message":"173","line":54,"column":6,"nodeType":"174","endLine":54,"endColumn":22,"suggestions":"175"},{"ruleId":"167","severity":1,"message":"176","line":5,"column":10,"nodeType":"169","messageId":"170","endLine":5,"endColumn":19},{"ruleId":"167","severity":1,"message":"177","line":7,"column":10,"nodeType":"169","messageId":"170","endLine":7,"endColumn":21},{"ruleId":"167","severity":1,"message":"178","line":13,"column":9,"nodeType":"169","messageId":"170","endLine":13,"endColumn":20},{"ruleId":"167","severity":1,"message":"179","line":6,"column":10,"nodeType":"169","messageId":"170","endLine":6,"endColumn":23},{"ruleId":"167","severity":1,"message":"177","line":5,"column":10,"nodeType":"169","messageId":"170","endLine":5,"endColumn":21},{"ruleId":"167","severity":1,"message":"180","line":8,"column":3,"nodeType":"169","messageId":"170","endLine":8,"endColumn":12},{"ruleId":"167","severity":1,"message":"181","line":9,"column":3,"nodeType":"169","messageId":"170","endLine":9,"endColumn":24},{"ruleId":"167","severity":1,"message":"182","line":17,"column":10,"nodeType":"169","messageId":"170","endLine":17,"endColumn":13},{"ruleId":"167","severity":1,"message":"183","line":18,"column":9,"nodeType":"169","messageId":"170","endLine":18,"endColumn":23},{"ruleId":"167","severity":1,"message":"184","line":14,"column":3,"nodeType":"169","messageId":"170","endLine":14,"endColumn":26},{"ruleId":"167","severity":1,"message":"180","line":15,"column":3,"nodeType":"169","messageId":"170","endLine":15,"endColumn":12},{"ruleId":"167","severity":1,"message":"185","line":36,"column":9,"nodeType":"169","messageId":"170","endLine":36,"endColumn":17},{"ruleId":"186","severity":1,"message":"187","line":166,"column":50,"nodeType":"188","messageId":"189","endLine":166,"endColumn":52},{"ruleId":"186","severity":1,"message":"187","line":198,"column":30,"nodeType":"188","messageId":"189","endLine":198,"endColumn":32},{"ruleId":"186","severity":1,"message":"187","line":229,"column":20,"nodeType":"188","messageId":"189","endLine":229,"endColumn":22},{"ruleId":"172","severity":1,"message":"190","line":273,"column":6,"nodeType":"174","endLine":273,"endColumn":22,"suggestions":"191"},{"ruleId":"167","severity":1,"message":"192","line":2,"column":10,"nodeType":"169","messageId":"170","endLine":2,"endColumn":24},{"ruleId":"172","severity":1,"message":"173","line":58,"column":6,"nodeType":"174","endLine":58,"endColumn":22,"suggestions":"193"},{"ruleId":"167","severity":1,"message":"185","line":36,"column":9,"nodeType":"169","messageId":"170","endLine":36,"endColumn":17},{"ruleId":"167","severity":1,"message":"194","line":196,"column":9,"nodeType":"169","messageId":"170","endLine":196,"endColumn":31},{"ruleId":"186","severity":1,"message":"187","line":198,"column":30,"nodeType":"188","messageId":"189","endLine":198,"endColumn":32},{"ruleId":"172","severity":1,"message":"190","line":277,"column":6,"nodeType":"174","endLine":277,"endColumn":22,"suggestions":"195"},"no-native-reassign",["196"],"no-negated-in-lhs",["197"],"no-unused-vars","'Header' is defined but never used.","Identifier","unusedVar","'StakingPage' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'loadContractData', 'userBalance', and 'userDepositedBalance'. Either include them or remove the dependency array.","ArrayExpression",["198"],"'useEffect' is defined but never used.","'useDispatch' is defined but never used.","'userAddress' is assigned a value but never used.","'RecentActions' is defined but never used.","'getReward' is defined but never used.","'getTotalLockedBalance' is defined but never used.","'apr' is assigned a value but never used.","'currentAddress' is assigned a value but never used.","'getUserDepositedBalance' is defined but never used.","'dispatch' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'loadUserData' and 'userBalance'. Either include them or remove the dependency array.",["199"],"'StakingSection' is defined but never used.",["200"],"'handleWithdrawAllClick' is assigned a value but never used.",["201"],"no-global-assign","no-unsafe-negation",{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},{"desc":"202","fix":"206"},{"desc":"204","fix":"207"},"Update the dependencies array to be: [currentAddress, loadContractData, userBalance, userDepositedBalance]",{"range":"208","text":"209"},"Update the dependencies array to be: [currentAddress, loadUserData, userBalance]",{"range":"210","text":"211"},{"range":"212","text":"209"},{"range":"213","text":"211"},[2052,2068],"[currentAddress, loadContractData, userBalance, userDepositedBalance]",[8794,8810],"[currentAddress, loadUserData, userBalance]",[2464,2480],[9137,9153]]