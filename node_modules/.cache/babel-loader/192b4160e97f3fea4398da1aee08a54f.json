{"ast":null,"code":"import { useMemo, createElement } from 'react';\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nvar getDirectionStyle = function getDirectionStyle(dir, size) {\n  switch (dir) {\n    case 'left':\n      return {\n        top: 0,\n        left: 0,\n        transform: 'translate3d(-100%, 0, 0)',\n        width: size,\n        height: '100vh'\n      };\n    case 'right':\n      return {\n        top: 0,\n        right: 0,\n        transform: 'translate3d(100%, 0, 0)',\n        width: size,\n        height: '100vh'\n      };\n    case 'bottom':\n      return {\n        left: 0,\n        right: 0,\n        bottom: 0,\n        transform: 'translate3d(0, 100%, 0)',\n        width: '100%',\n        height: size\n      };\n    case 'top':\n      return {\n        left: 0,\n        right: 0,\n        top: 0,\n        transform: 'translate3d(0, -100%, 0)',\n        width: '100%',\n        height: size\n      };\n    default:\n      return {};\n  }\n};\nvar EZDrawer = function EZDrawer(_ref) {\n  var open = _ref.open,\n    _ref$onClose = _ref.onClose,\n    onClose = _ref$onClose === void 0 ? function () {} : _ref$onClose,\n    children = _ref.children,\n    style = _ref.style,\n    _ref$enableOverlay = _ref.enableOverlay,\n    enableOverlay = _ref$enableOverlay === void 0 ? true : _ref$enableOverlay,\n    _ref$overlayColor = _ref.overlayColor,\n    overlayColor = _ref$overlayColor === void 0 ? '#000' : _ref$overlayColor,\n    _ref$overlayOpacity = _ref.overlayOpacity,\n    overlayOpacity = _ref$overlayOpacity === void 0 ? 0.4 : _ref$overlayOpacity,\n    _ref$zIndex = _ref.zIndex,\n    zIndex = _ref$zIndex === void 0 ? 100 : _ref$zIndex,\n    _ref$duration = _ref.duration,\n    duration = _ref$duration === void 0 ? 500 : _ref$duration,\n    direction = _ref.direction,\n    _ref$size = _ref.size,\n    size = _ref$size === void 0 ? 250 : _ref$size,\n    className = _ref.className,\n    customIdSuffix = _ref.customIdSuffix;\n  var idSuffix = useMemo(function () {\n    return customIdSuffix || (Math.random() + 1).toString(36).substring(7);\n  }, [customIdSuffix]);\n  var overlayStyles = {\n    backgroundColor: \"\" + overlayColor,\n    opacity: \"\" + overlayOpacity,\n    zIndex: zIndex\n  };\n  var drawerStyles = _extends({\n    zIndex: zIndex + 1,\n    transitionDuration: duration + \"ms\"\n  }, getDirectionStyle(direction, size), style);\n  return createElement(\"div\", {\n    id: 'EZDrawer' + idSuffix,\n    className: 'EZDrawer'\n  }, createElement(\"input\", {\n    type: 'checkbox',\n    id: 'EZDrawer__checkbox' + idSuffix,\n    className: 'EZDrawer__checkbox',\n    onChange: onClose,\n    checked: open\n  }), createElement(\"nav\", {\n    role: 'navigation',\n    id: 'EZDrawer__container' + idSuffix,\n    style: drawerStyles,\n    className: 'EZDrawer__container ' + className\n  }, children), enableOverlay && createElement(\"label\", {\n    htmlFor: 'EZDrawer__checkbox' + idSuffix,\n    id: 'EZDrawer__overlay' + idSuffix,\n    className: 'EZDrawer__overlay',\n    style: overlayStyles\n  }));\n};\nexport default EZDrawer;","map":{"version":3,"sources":["../src/index.tsx"],"names":["getDirectionStyle","dir","size","top","left","transform","width","height","right","bottom","EZDrawer","open","onClose","children","style","enableOverlay","overlayColor","overlayOpacity","zIndex","duration","direction","className","customIdSuffix","idSuffix","Math","random","toString","substring","overlayStyles","backgroundColor","opacity","drawerStyles","transitionDuration","id","type","onChange","checked","role","htmlFor"],"mappings":"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","sourcesContent":["import * as React from 'react'\r\nimport './styles.scss'\r\n\r\ntype Props = {\r\n    open: boolean\r\n    onClose?: () => void\r\n    direction: 'left' | 'right' | 'top' | 'bottom'\r\n    children?: React.ReactNode\r\n    duration?: number\r\n    overlayOpacity?: number\r\n    overlayColor?: String\r\n    enableOverlay?: boolean\r\n    style?: React.CSSProperties\r\n    zIndex?: number\r\n    size?: number | string\r\n    className?: string | undefined\r\n    customIdSuffix?: string | undefined\r\n}\r\n\r\nconst getDirectionStyle = (\r\n    dir: string,\r\n    size?: number | string,\r\n): {} | React.CSSProperties => {\r\n    switch (dir) {\r\n        case 'left':\r\n            return {\r\n                top: 0,\r\n                left: 0,\r\n                transform: 'translate3d(-100%, 0, 0)',\r\n                width: size,\r\n                height: '100vh',\r\n            }\r\n        case 'right':\r\n            return {\r\n                top: 0,\r\n                right: 0,\r\n                transform: 'translate3d(100%, 0, 0)',\r\n                width: size,\r\n                height: '100vh',\r\n            }\r\n        case 'bottom':\r\n            return {\r\n                left: 0,\r\n                right: 0,\r\n                bottom: 0,\r\n                transform: 'translate3d(0, 100%, 0)',\r\n                width: '100%',\r\n                height: size,\r\n            }\r\n        case 'top':\r\n            return {\r\n                left: 0,\r\n                right: 0,\r\n                top: 0,\r\n                transform: 'translate3d(0, -100%, 0)',\r\n                width: '100%',\r\n                height: size,\r\n            }\r\n\r\n        default:\r\n            return {}\r\n    }\r\n}\r\n\r\nconst EZDrawer: React.FC<Props> = function ({\r\n    open,\r\n    onClose = () => {},\r\n    children,\r\n    style,\r\n    enableOverlay = true,\r\n    overlayColor = '#000',\r\n    overlayOpacity = 0.4,\r\n    zIndex = 100,\r\n    duration = 500,\r\n    direction,\r\n    size = 250,\r\n    className,\r\n    customIdSuffix,\r\n}): JSX.Element {\r\n    const idSuffix = React.useMemo(() => {\r\n        return customIdSuffix || (Math.random() + 1).toString(36).substring(7)\r\n    }, [customIdSuffix])\r\n\r\n    const overlayStyles: React.CSSProperties = {\r\n        backgroundColor: `${overlayColor}`,\r\n        opacity: `${overlayOpacity}`,\r\n        zIndex: zIndex,\r\n    }\r\n\r\n    const drawerStyles: React.CSSProperties = {\r\n        zIndex: zIndex + 1,\r\n        transitionDuration: `${duration}ms`,\r\n        ...getDirectionStyle(direction, size),\r\n        ...style,\r\n    }\r\n\r\n    return (\r\n        <div id={'EZDrawer' + idSuffix} className='EZDrawer'>\r\n            <input\r\n                type='checkbox'\r\n                id={'EZDrawer__checkbox' + idSuffix}\r\n                className='EZDrawer__checkbox'\r\n                onChange={onClose}\r\n                checked={open}\r\n            />\r\n            <nav\r\n                role='navigation'\r\n                id={'EZDrawer__container' + idSuffix}\r\n                style={drawerStyles}\r\n                className={'EZDrawer__container ' + className}\r\n            >\r\n                {children}\r\n            </nav>\r\n            {enableOverlay && (\r\n                <label\r\n                    htmlFor={'EZDrawer__checkbox' + idSuffix}\r\n                    id={'EZDrawer__overlay' + idSuffix}\r\n                    className='EZDrawer__overlay'\r\n                    style={overlayStyles}\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EZDrawer\r\n"]},"metadata":{},"sourceType":"module"}