{"ast":null,"code":"var _slicedToArray = require(\"D:/jobStuff/hoichistakes/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar Bytes = require(\"./bytes\");\nvar Nat = require(\"./nat\");\nvar elliptic = require(\"elliptic\");\nvar rlp = require(\"./rlp\");\nvar secp256k1 = new elliptic.ec(\"secp256k1\"); // eslint-disable-line\nvar _require = require(\"./hash\"),\n  keccak256 = _require.keccak256,\n  keccak256s = _require.keccak256s;\nvar create = function create(entropy) {\n  var innerHex = keccak256(Bytes.concat(Bytes.random(32), entropy || Bytes.random(32)));\n  var middleHex = Bytes.concat(Bytes.concat(Bytes.random(32), innerHex), Bytes.random(32));\n  var outerHex = keccak256(middleHex);\n  return fromPrivate(outerHex);\n};\nvar toChecksum = function toChecksum(address) {\n  var addressHash = keccak256s(address.slice(2));\n  var checksumAddress = \"0x\";\n  for (var i = 0; i < 40; i++) {\n    checksumAddress += parseInt(addressHash[i + 2], 16) > 7 ? address[i + 2].toUpperCase() : address[i + 2];\n  }\n  return checksumAddress;\n};\nvar fromPrivate = function fromPrivate(privateKey) {\n  var buffer = new Buffer(privateKey.slice(2), \"hex\");\n  var ecKey = secp256k1.keyFromPrivate(buffer);\n  var publicKey = \"0x\" + ecKey.getPublic(false, 'hex').slice(2);\n  var publicHash = keccak256(publicKey);\n  var address = toChecksum(\"0x\" + publicHash.slice(-40));\n  return {\n    address: address,\n    privateKey: privateKey\n  };\n};\nvar encodeSignature = function encodeSignature(_ref) {\n  var _ref2 = _slicedToArray(_ref, 3),\n    v = _ref2[0],\n    r = _ref2[1],\n    s = _ref2[2];\n  return Bytes.flatten([r, s, v]);\n};\nvar decodeSignature = function decodeSignature(hex) {\n  return [Bytes.slice(64, Bytes.length(hex), hex), Bytes.slice(0, 32, hex), Bytes.slice(32, 64, hex)];\n};\nvar makeSigner = function makeSigner(addToV) {\n  return function (hash, privateKey) {\n    var signature = secp256k1.keyFromPrivate(new Buffer(privateKey.slice(2), \"hex\")).sign(new Buffer(hash.slice(2), \"hex\"), {\n      canonical: true\n    });\n    return encodeSignature([Nat.fromString(Bytes.fromNumber(addToV + signature.recoveryParam)), Bytes.pad(32, Bytes.fromNat(\"0x\" + signature.r.toString(16))), Bytes.pad(32, Bytes.fromNat(\"0x\" + signature.s.toString(16)))]);\n  };\n};\nvar sign = makeSigner(27); // v=27|28 instead of 0|1...\n\nvar recover = function recover(hash, signature) {\n  var vals = decodeSignature(signature);\n  var vrs = {\n    v: Bytes.toNumber(vals[0]),\n    r: vals[1].slice(2),\n    s: vals[2].slice(2)\n  };\n  var ecPublicKey = secp256k1.recoverPubKey(new Buffer(hash.slice(2), \"hex\"), vrs, vrs.v < 2 ? vrs.v : 1 - vrs.v % 2); // because odd vals mean v=0... sadly that means v=0 means v=1... I hate that\n  var publicKey = \"0x\" + ecPublicKey.encode(\"hex\", false).slice(2);\n  var publicHash = keccak256(publicKey);\n  var address = toChecksum(\"0x\" + publicHash.slice(-40));\n  return address;\n};\nmodule.exports = {\n  create: create,\n  toChecksum: toChecksum,\n  fromPrivate: fromPrivate,\n  sign: sign,\n  makeSigner: makeSigner,\n  recover: recover,\n  encodeSignature: encodeSignature,\n  decodeSignature: decodeSignature\n};","map":{"version":3,"names":["Bytes","require","Nat","elliptic","rlp","secp256k1","ec","keccak256","keccak256s","create","entropy","innerHex","concat","random","middleHex","outerHex","fromPrivate","toChecksum","address","addressHash","slice","checksumAddress","i","parseInt","toUpperCase","privateKey","buffer","Buffer","ecKey","keyFromPrivate","publicKey","getPublic","publicHash","encodeSignature","v","r","s","flatten","decodeSignature","hex","length","makeSigner","addToV","hash","signature","sign","canonical","fromString","fromNumber","recoveryParam","pad","fromNat","toString","recover","vals","vrs","toNumber","ecPublicKey","recoverPubKey","encode","module","exports"],"sources":["D:/jobStuff/hoichistakes/node_modules/web3-eth-accounts/node_modules/eth-lib/lib/account.js"],"sourcesContent":["const Bytes = require(\"./bytes\");\nconst Nat = require(\"./nat\");\nconst elliptic = require(\"elliptic\");\nconst rlp = require(\"./rlp\");\nconst secp256k1 = new elliptic.ec(\"secp256k1\"); // eslint-disable-line\nconst { keccak256, keccak256s } = require(\"./hash\");\n\nconst create = entropy => {\n  const innerHex = keccak256(Bytes.concat(Bytes.random(32), entropy || Bytes.random(32)));\n  const middleHex = Bytes.concat(Bytes.concat(Bytes.random(32), innerHex), Bytes.random(32));\n  const outerHex = keccak256(middleHex);\n  return fromPrivate(outerHex);\n};\n\nconst toChecksum = address => {\n  const addressHash = keccak256s(address.slice(2));\n  let checksumAddress = \"0x\";\n  for (let i = 0; i < 40; i++) checksumAddress += parseInt(addressHash[i + 2], 16) > 7 ? address[i + 2].toUpperCase() : address[i + 2];\n  return checksumAddress;\n};\n\nconst fromPrivate = privateKey => {\n  const buffer = new Buffer(privateKey.slice(2), \"hex\");\n  const ecKey = secp256k1.keyFromPrivate(buffer);\n  const publicKey = \"0x\" + ecKey.getPublic(false, 'hex').slice(2);\n  const publicHash = keccak256(publicKey);\n  const address = toChecksum(\"0x\" + publicHash.slice(-40));\n  return {\n    address: address,\n    privateKey: privateKey\n  };\n};\n\nconst encodeSignature = ([v, r, s]) => Bytes.flatten([r, s, v]);\n\nconst decodeSignature = hex => [Bytes.slice(64, Bytes.length(hex), hex), Bytes.slice(0, 32, hex), Bytes.slice(32, 64, hex)];\n\nconst makeSigner = addToV => (hash, privateKey) => {\n  const signature = secp256k1.keyFromPrivate(new Buffer(privateKey.slice(2), \"hex\")).sign(new Buffer(hash.slice(2), \"hex\"), { canonical: true });\n  return encodeSignature([Nat.fromString(Bytes.fromNumber(addToV + signature.recoveryParam)), Bytes.pad(32, Bytes.fromNat(\"0x\" + signature.r.toString(16))), Bytes.pad(32, Bytes.fromNat(\"0x\" + signature.s.toString(16)))]);\n};\n\nconst sign = makeSigner(27); // v=27|28 instead of 0|1...\n\nconst recover = (hash, signature) => {\n  const vals = decodeSignature(signature);\n  const vrs = { v: Bytes.toNumber(vals[0]), r: vals[1].slice(2), s: vals[2].slice(2) };\n  const ecPublicKey = secp256k1.recoverPubKey(new Buffer(hash.slice(2), \"hex\"), vrs, vrs.v < 2 ? vrs.v : 1 - vrs.v % 2); // because odd vals mean v=0... sadly that means v=0 means v=1... I hate that\n  const publicKey = \"0x\" + ecPublicKey.encode(\"hex\", false).slice(2);\n  const publicHash = keccak256(publicKey);\n  const address = toChecksum(\"0x\" + publicHash.slice(-40));\n  return address;\n};\n\nmodule.exports = {\n  create,\n  toChecksum,\n  fromPrivate,\n  sign,\n  makeSigner,\n  recover,\n  encodeSignature,\n  decodeSignature\n};"],"mappings":"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"},"metadata":{},"sourceType":"script"}